@rendermode InteractiveServer

<div class="content-box">
    <div class="string-box">
        <Image Src="images/empty-profile-photo.png" Class="rounded" style="width: 200px;height: 200px;" />
        <div class="info-box">
            <p class="big-text info-item">@Master.FirstName</p>
            <p class="big-text info-item">@Master.LastName</p>
            <p class="big-text info-item">@Master.Profession</p>
            <p class="big-text info-item">Стаж: @GetWorkStateText()</p>
        </div>
    </div>
    <div class="rate-box">
        <Card style="margin-top: 10px;">
            <CardBody>
                <RatingStars Rate=@Master.Rate Scale=0.36 />
            </CardBody>
        </Card>
    </div>
    <div>
        <p class="medium-text">@GetCommentsIndicatorText()</p>
        <Button Color="ButtonColor.Dark" class="add-btn">Оставить отзыв</Button>
        <Card>
            <CardBody>
                @foreach (CommentOutputModel comment in Master.Сomments)
                {
                    <Card class="comment-box">
                        <CardBody>
                            <div class="comment-header">
                                <Image Src="images/empty-profile-photo.png" Class="rounded" style="width: 50px;height: 50px;" />
                                <div>
                                    <p class="small-text info-item">@comment.Client.FirstName</p>
                                    <p class="small-text info-item">@comment.Client.LastName</p>
                                </div>
                                <div style="display: flex;flex: 1;justify-content: flex-end;">
                                    <RatingStars Scale="0.2" Rate=@comment.Rate />
                                </div>
                            </div>
                            <Card style="margin-top: 10px;">
                                <CardBody>
                                    <div class="comment-text-box">
                                        <p>@comment.Text</p>
                                    </div>
                                </CardBody>
                            </Card>
                        </CardBody>
                    </Card>
                }
            </CardBody>
        </Card>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; } = null;

    private MasterOutputModel? Master;

    protected override void OnParametersSet() => this.LoadMaster();

    private void LoadMaster()
    {
        if (this.Id != null)
        {
            var masterManager = new MasterManager();
            this.Master = masterManager.GetMasterOutputModelById((int)this.Id);
        }
        else 
        {
            var masterManager = new MasterManager();
            this.Master = masterManager.GetMasterOutputModelById(0);
        }
    }

    public string GetWorkStateText(){
        int endSymbol = this.Master.WorkState % 10;
        switch (endSymbol)
        {
            case 1: return $"{this.Master.WorkState} год";
            case int n when (n > 1 && n < 5): return $"{this.Master.WorkState} года";
            default: return $"{this.Master.WorkState} лет";
        }
    }

    public string GetCommentsIndicatorText()
    {
        int endSymbol = this.Master.Сomments.Count % 10;
        switch (endSymbol)
        {
            case 1: return $"{this.Master.Сomments.Count} отзыв";
            case int n when (n > 1 && n < 5): return $"{this.Master.Сomments.Count} отзыва";
            default: return $"{this.Master.Сomments.Count} отзывов";
        }
    }

}
